use super::common::World;
use clap::Parser;

use futures::{future, prelude::*};
use rand::rng;
use rand_distr::{Distribution, Uniform};
use std::{
    net::{IpAddr, Ipv6Addr, SocketAddr},
    time::Duration,
};
use tarpc::{
    context,
    server::{self, Channel, incoming::Incoming},
    tokio_serde::formats::Json,
};
use tokio::time;

#[derive(Parser, Debug)]
pub struct Flags {
    /// Sets the port number to listen on.
    #[clap(long)]
    port: u16,
}

// This is the type that implements the generated World trait. It is the business logic
// and is used to start the server.
#[derive(Clone)]
struct HelloServer(SocketAddr);

impl World for HelloServer {
    async fn hello(self, _: context::Context, name: String) -> String {
        let sleep_time =
            Duration::from_millis(Uniform::new_inclusive(1, 10).unwrap().sample(&mut rng()));
        time::sleep(sleep_time).await;
        format!("Hello, {name}! You are connected from {}", self.0)
    }

    async fn hello2(self, _: context::Context, name: String) -> String {
        format!("Hello2, {name}! You are connected from {}", self.0)
    }
}

pub async fn main(flags: &Flags) -> anyhow::Result<()> {
    let server_addr = (IpAddr::V6(Ipv6Addr::LOCALHOST), flags.port);

    // JSON transport is provided by the json_transport tarpc module. It makes it easy
    // to start up a serde-powered json serialization strategy over TCP.
    let mut listener = tarpc::serde_transport::tcp::listen(&server_addr, Json::default).await?;
    println!("Listening on port {}", listener.local_addr().port());
    listener.config_mut().max_frame_length(usize::MAX);
    // Listener yields a stream of connections. Each connection is a stream of requests.
    listener
        // Ignore accept errors.
        .filter_map(|r| future::ready(r.ok()))
        .map(server::BaseChannel::with_defaults)
        // Limit channels to 1 per IP.
        .max_channels_per_key(1, |t| t.transport().peer_addr().unwrap().ip())
        // serve is generated by the service attribute. It takes as input any type implementing
        // the generated World trait.
        .map(|channel| {
            // Each channel **represents a single, persistent connection to a client.**
            let server = HelloServer(channel.transport().peer_addr().unwrap());
            channel.execute(server.serve()).for_each(
                // Async wrapper around tokio::spawn
                |fut| async {
                    tokio::spawn(fut);
                },
            )
        })
        // Max 10 channels.
        .buffer_unordered(10)
        // for_each runs stream to completion. For this particular case, it will run forever.
        // An example stream which terminates would finite-length stream.
        .for_each(|_| async {})
        .await;

    Ok(())
}
